// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

export const typeDefs = /* GraphQL */ `type AggregateFeatureFlag {
  count: Int!
}

type AggregateOrganization {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

type FeatureFlag {
  id: ID!
  name: String!
  description: String
  createdAt: DateTime!
  updatedAt: DateTime!
  owner: Organization!
}

type FeatureFlagConnection {
  pageInfo: PageInfo!
  edges: [FeatureFlagEdge]!
  aggregate: AggregateFeatureFlag!
}

input FeatureFlagCreateInput {
  id: ID
  name: String!
  description: String
  owner: OrganizationCreateOneInput!
}

input FeatureFlagCreateManyInput {
  create: [FeatureFlagCreateInput!]
  connect: [FeatureFlagWhereUniqueInput!]
}

type FeatureFlagEdge {
  node: FeatureFlag!
  cursor: String!
}

enum FeatureFlagOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type FeatureFlagPreviousValues {
  id: ID!
  name: String!
  description: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

input FeatureFlagScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [FeatureFlagScalarWhereInput!]
  OR: [FeatureFlagScalarWhereInput!]
  NOT: [FeatureFlagScalarWhereInput!]
}

type FeatureFlagSubscriptionPayload {
  mutation: MutationType!
  node: FeatureFlag
  updatedFields: [String!]
  previousValues: FeatureFlagPreviousValues
}

input FeatureFlagSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: FeatureFlagWhereInput
  AND: [FeatureFlagSubscriptionWhereInput!]
  OR: [FeatureFlagSubscriptionWhereInput!]
  NOT: [FeatureFlagSubscriptionWhereInput!]
}

input FeatureFlagUpdateDataInput {
  name: String
  description: String
  owner: OrganizationUpdateOneRequiredInput
}

input FeatureFlagUpdateInput {
  name: String
  description: String
  owner: OrganizationUpdateOneRequiredInput
}

input FeatureFlagUpdateManyDataInput {
  name: String
  description: String
}

input FeatureFlagUpdateManyInput {
  create: [FeatureFlagCreateInput!]
  update: [FeatureFlagUpdateWithWhereUniqueNestedInput!]
  upsert: [FeatureFlagUpsertWithWhereUniqueNestedInput!]
  delete: [FeatureFlagWhereUniqueInput!]
  connect: [FeatureFlagWhereUniqueInput!]
  set: [FeatureFlagWhereUniqueInput!]
  disconnect: [FeatureFlagWhereUniqueInput!]
  deleteMany: [FeatureFlagScalarWhereInput!]
  updateMany: [FeatureFlagUpdateManyWithWhereNestedInput!]
}

input FeatureFlagUpdateManyMutationInput {
  name: String
  description: String
}

input FeatureFlagUpdateManyWithWhereNestedInput {
  where: FeatureFlagScalarWhereInput!
  data: FeatureFlagUpdateManyDataInput!
}

input FeatureFlagUpdateWithWhereUniqueNestedInput {
  where: FeatureFlagWhereUniqueInput!
  data: FeatureFlagUpdateDataInput!
}

input FeatureFlagUpsertWithWhereUniqueNestedInput {
  where: FeatureFlagWhereUniqueInput!
  update: FeatureFlagUpdateDataInput!
  create: FeatureFlagCreateInput!
}

input FeatureFlagWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  owner: OrganizationWhereInput
  AND: [FeatureFlagWhereInput!]
  OR: [FeatureFlagWhereInput!]
  NOT: [FeatureFlagWhereInput!]
}

input FeatureFlagWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createFeatureFlag(data: FeatureFlagCreateInput!): FeatureFlag!
  updateFeatureFlag(data: FeatureFlagUpdateInput!, where: FeatureFlagWhereUniqueInput!): FeatureFlag
  updateManyFeatureFlags(data: FeatureFlagUpdateManyMutationInput!, where: FeatureFlagWhereInput): BatchPayload!
  upsertFeatureFlag(where: FeatureFlagWhereUniqueInput!, create: FeatureFlagCreateInput!, update: FeatureFlagUpdateInput!): FeatureFlag!
  deleteFeatureFlag(where: FeatureFlagWhereUniqueInput!): FeatureFlag
  deleteManyFeatureFlags(where: FeatureFlagWhereInput): BatchPayload!
  createOrganization(data: OrganizationCreateInput!): Organization!
  updateOrganization(data: OrganizationUpdateInput!, where: OrganizationWhereUniqueInput!): Organization
  updateManyOrganizations(data: OrganizationUpdateManyMutationInput!, where: OrganizationWhereInput): BatchPayload!
  upsertOrganization(where: OrganizationWhereUniqueInput!, create: OrganizationCreateInput!, update: OrganizationUpdateInput!): Organization!
  deleteOrganization(where: OrganizationWhereUniqueInput!): Organization
  deleteManyOrganizations(where: OrganizationWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type Organization {
  id: ID!
  name: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  members(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
}

type OrganizationConnection {
  pageInfo: PageInfo!
  edges: [OrganizationEdge]!
  aggregate: AggregateOrganization!
}

input OrganizationCreateInput {
  id: ID
  name: String!
  members: UserCreateManyWithoutOrganizationInput
}

input OrganizationCreateOneInput {
  create: OrganizationCreateInput
  connect: OrganizationWhereUniqueInput
}

input OrganizationCreateOneWithoutMembersInput {
  create: OrganizationCreateWithoutMembersInput
  connect: OrganizationWhereUniqueInput
}

input OrganizationCreateWithoutMembersInput {
  id: ID
  name: String!
}

type OrganizationEdge {
  node: Organization!
  cursor: String!
}

enum OrganizationOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type OrganizationPreviousValues {
  id: ID!
  name: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type OrganizationSubscriptionPayload {
  mutation: MutationType!
  node: Organization
  updatedFields: [String!]
  previousValues: OrganizationPreviousValues
}

input OrganizationSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: OrganizationWhereInput
  AND: [OrganizationSubscriptionWhereInput!]
  OR: [OrganizationSubscriptionWhereInput!]
  NOT: [OrganizationSubscriptionWhereInput!]
}

input OrganizationUpdateDataInput {
  name: String
  members: UserUpdateManyWithoutOrganizationInput
}

input OrganizationUpdateInput {
  name: String
  members: UserUpdateManyWithoutOrganizationInput
}

input OrganizationUpdateManyMutationInput {
  name: String
}

input OrganizationUpdateOneRequiredInput {
  create: OrganizationCreateInput
  update: OrganizationUpdateDataInput
  upsert: OrganizationUpsertNestedInput
  connect: OrganizationWhereUniqueInput
}

input OrganizationUpdateOneRequiredWithoutMembersInput {
  create: OrganizationCreateWithoutMembersInput
  update: OrganizationUpdateWithoutMembersDataInput
  upsert: OrganizationUpsertWithoutMembersInput
  connect: OrganizationWhereUniqueInput
}

input OrganizationUpdateWithoutMembersDataInput {
  name: String
}

input OrganizationUpsertNestedInput {
  update: OrganizationUpdateDataInput!
  create: OrganizationCreateInput!
}

input OrganizationUpsertWithoutMembersInput {
  update: OrganizationUpdateWithoutMembersDataInput!
  create: OrganizationCreateWithoutMembersInput!
}

input OrganizationWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  members_every: UserWhereInput
  members_some: UserWhereInput
  members_none: UserWhereInput
  AND: [OrganizationWhereInput!]
  OR: [OrganizationWhereInput!]
  NOT: [OrganizationWhereInput!]
}

input OrganizationWhereUniqueInput {
  id: ID
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  featureFlag(where: FeatureFlagWhereUniqueInput!): FeatureFlag
  featureFlags(where: FeatureFlagWhereInput, orderBy: FeatureFlagOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [FeatureFlag]!
  featureFlagsConnection(where: FeatureFlagWhereInput, orderBy: FeatureFlagOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FeatureFlagConnection!
  organization(where: OrganizationWhereUniqueInput!): Organization
  organizations(where: OrganizationWhereInput, orderBy: OrganizationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Organization]!
  organizationsConnection(where: OrganizationWhereInput, orderBy: OrganizationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): OrganizationConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Subscription {
  featureFlag(where: FeatureFlagSubscriptionWhereInput): FeatureFlagSubscriptionPayload
  organization(where: OrganizationSubscriptionWhereInput): OrganizationSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  username: String!
  email: String!
  name: String
  createdAt: DateTime!
  updatedAt: DateTime!
  organization: Organization!
  featureFlags(where: FeatureFlagWhereInput, orderBy: FeatureFlagOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [FeatureFlag!]
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  username: String!
  email: String!
  name: String
  organization: OrganizationCreateOneWithoutMembersInput!
  featureFlags: FeatureFlagCreateManyInput
}

input UserCreateManyWithoutOrganizationInput {
  create: [UserCreateWithoutOrganizationInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateWithoutOrganizationInput {
  id: ID
  username: String!
  email: String!
  name: String
  featureFlags: FeatureFlagCreateManyInput
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  username_ASC
  username_DESC
  email_ASC
  email_DESC
  name_ASC
  name_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserPreviousValues {
  id: ID!
  username: String!
  email: String!
  name: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

input UserScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  username: String
  username_not: String
  username_in: [String!]
  username_not_in: [String!]
  username_lt: String
  username_lte: String
  username_gt: String
  username_gte: String
  username_contains: String
  username_not_contains: String
  username_starts_with: String
  username_not_starts_with: String
  username_ends_with: String
  username_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [UserScalarWhereInput!]
  OR: [UserScalarWhereInput!]
  NOT: [UserScalarWhereInput!]
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  username: String
  email: String
  name: String
  organization: OrganizationUpdateOneRequiredWithoutMembersInput
  featureFlags: FeatureFlagUpdateManyInput
}

input UserUpdateManyDataInput {
  username: String
  email: String
  name: String
}

input UserUpdateManyMutationInput {
  username: String
  email: String
  name: String
}

input UserUpdateManyWithoutOrganizationInput {
  create: [UserCreateWithoutOrganizationInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutOrganizationInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutOrganizationInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput!
  data: UserUpdateManyDataInput!
}

input UserUpdateWithoutOrganizationDataInput {
  username: String
  email: String
  name: String
  featureFlags: FeatureFlagUpdateManyInput
}

input UserUpdateWithWhereUniqueWithoutOrganizationInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutOrganizationDataInput!
}

input UserUpsertWithWhereUniqueWithoutOrganizationInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutOrganizationDataInput!
  create: UserCreateWithoutOrganizationInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  username: String
  username_not: String
  username_in: [String!]
  username_not_in: [String!]
  username_lt: String
  username_lte: String
  username_gt: String
  username_gte: String
  username_contains: String
  username_not_contains: String
  username_starts_with: String
  username_not_starts_with: String
  username_ends_with: String
  username_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  organization: OrganizationWhereInput
  featureFlags_every: FeatureFlagWhereInput
  featureFlags_some: FeatureFlagWhereInput
  featureFlags_none: FeatureFlagWhereInput
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  username: String
  email: String
}
`